rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isTenant(docTenantId) {
      return request.auth != null &&
             request.auth.token.tenantId != null &&
             docTenantId != null &&
             request.auth.token.tenantId == docTenantId;
    }

    function isServiceAccount() {
      return request.auth != null &&
             request.auth.token.email != null &&
             // Allows service principals like worker@project.iam.gserviceaccount.com while excluding regular users.
             request.auth.token.email.matches('.*@.*\.gserviceaccount\.com$');
    }

    match /events/{documentId} {
      allow read: if isServiceAccount() || isTenant(resource.data.tenantId);
      allow write: if isServiceAccount();
    }

    match /carts/{documentId} {
      allow read: if isServiceAccount() || isTenant(resource.data.tenantId);
      allow write: if isServiceAccount();
    }

    match /orders/{documentId} {
      allow read: if isServiceAccount() || isTenant(resource.data.tenantId);
      allow write: if isServiceAccount();
    }

    match /recoveries/{documentId} {
      allow read: if isServiceAccount() || isTenant(resource.data.tenantId);
      allow write: if isServiceAccount();
    }

    match /billing_ledger/{documentId} {
      allow read: if isServiceAccount() || isTenant(resource.data.tenantId);
      allow write: if isServiceAccount();
    }

    match /shops/{tenantId}/settings/{documentId} {
      allow read: if isServiceAccount() || (isTenant(resource.data.tenantId) && resource.data.tenantId == tenantId);
      allow write: if isServiceAccount();
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
